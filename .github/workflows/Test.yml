name: üî• testing rom builder ü´†

on:
  workflow_dispatch:
    inputs:
      # Core Build Options
      rom_name:
        description: 'ROM Name (e.g., lineage, crdroid)'
        required: true
        default: 'lineage'
      rom_manifest:
        description: 'Main manifest URL'
        required: true
        default: 'https://github.com/LineageOS/android.git'
      rom_branch:
        description: 'Manifest branch'
        required: true
        default: 'lineage-20.0'
      
      # Device Configuration
      devices:
        description: 'Device codenames (comma separated)'
        required: true
        default: 'davinci'
      device_trees:
        description: 'Device tree URLs (comma separated)'
        required: false
      device_branches:
        description: 'Device tree branches (default=rom_branch)'
        required: false
      kernel_trees:
        description: 'Kernel tree URLs (comma separated)'
        required: false
      vendor_trees:
        description: 'Vendor tree URLs (comma separated)'
        required: false
      
      # Build Customization
      lunch_command:
        description: 'Custom lunch command (leave empty for default)'
        required: false
        default: ''
      build_command:
        description: 'Custom build command (default=mka bacon)'
        required: false
        default: 'mka bacon'
      extra_packages:
        description: 'Additional packages to build (comma separated)'
        required: false
      
      # System Configuration
      clean_build:
        description: 'Perform clean build?'
        required: false
        default: false
        type: boolean
      resync_sources:
        description: 'Force resync all sources?'
        required: false
        default: false
        type: boolean
      ccache_size:
        description: 'CCache size'
        required: false
        default: '50G'
      
      # Advanced Options
      local_manifests:
        description: 'Additional manifest URLs (comma separated)'
        required: false
      custom_patches:
        description: 'Patch script URL to apply'
        required: false

env:
  ROM_DIR: /mnt/ssd/rom
  CCACHE_DIR: /mnt/ssd/ccache
  USE_CCACHE: 1
  CCACHE_COMPRESS: 1
  TZ: UTC
  BUILD_DATE: $(date +%Y%m%d)

jobs:
  build:
    name: üèó Build ${{ inputs.rom_name }}
    runs-on: [self-hosted, linux, x86_64, rom-builder]
    timeout-minutes: 6000
    
    steps:
      # ================= SETUP =================
      - name: üîç Validate Environment
        run: |
          echo "‚öôÔ∏è Hardware Validation:"
          [ $(df -BG --output=avail . | tail -1 | tr -d 'G') -gt 300 ] || {
            echo "::error::Need 300GB+ disk"; exit 1;
          }
          [ $(free -g | awk '/Mem:/ {print $2}') -gt 32 ] || {
            echo "::error::Need 32GB+ RAM"; exit 1;
          }

      - name: üì¶ Install Dependencies
        run: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y \
            bc bison build-essential ccache curl flex g++-multilib gcc-multilib \
            git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev \
            lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev \
            libxml2 libxml2-utils lzop maven pngcrush rsync schedtool \
            squashfs-tools xsltproc zip zlib1g-dev repo jq android-sdk-libsparse-utils \
            xmlstarlet pigz p7zip-full aria2 patchelf

          sudo ln -sf /usr/bin/python3 /usr/bin/python
          git config --global user.name "ROM Builder"
          git config --global user.email "builder@localhost"
          git lfs install

      - name: üóÇ Initialize Workspace
        run: |
          mkdir -p "$ROM_DIR" "$CCACHE_DIR"
          chmod -R 777 "$ROM_DIR" "$CCACHE_DIR"
          ccache -M "${{ inputs.ccache_size }}"
          ccache -o compression=true
          ccache -z

      # ================= SYNC =================
      - name: ‚ö° Initialize Repo
        working-directory: ${{ env.ROM_DIR }}
        run: |
          repo init -u "${{ inputs.rom_manifest }}" \
            -b "${{ inputs.rom_branch }}" \
            --depth=1 \
            --repo-rev=main

      - name: üìú Apply Local Manifests
        if: ${{ inputs.local_manifests }}
        working-directory: ${{ env.ROM_DIR }}
        run: |
          mkdir -p .repo/local_manifests
          IFS=',' read -ra MANIFESTS <<< "${{ inputs.local_manifests }}"
          for url in "${MANIFESTS[@]}"; do
            if [[ "$url" == *.xml ]]; then
              curl -L -o ".repo/local_manifests/$(basename "$url")" "$url"
            else
              git clone --depth=1 "$url" .repo/local_manifests/$(basename "$url" .git)
            fi
          done

      - name: üîÑ Sync Sources
        working-directory: ${{ env.ROM_DIR }}
        run: |
          if ${{ inputs.resync_sources }}; then
            repo sync -c -j$(nproc) --force-sync --no-clone-bundle --no-tags --optimized-fetch --prune
          else
            repo sync -c -j$(nproc) --no-clone-bundle --no-tags --optimized-fetch
          fi

      # ================= DEVICE SETUP =================
      - name: üå≥ Clone Device Trees
        if: ${{ inputs.device_trees }}
        working-directory: ${{ env.ROM_DIR }}
        run: |
          IFS=',' read -ra TREES <<< "${{ inputs.device_trees }}"
          IFS=',' read -ra BRANCHES <<< "${{ inputs.device_branches || inputs.rom_branch }}"
          for i in "${!TREES[@]}"; do
            git clone --depth=1 -b "${BRANCHES[$i]}" "${TREES[$i]}" "device/${TREES[$i]##*/}"
          done

      - name: üíæ Clone Kernel Trees
        if: ${{ inputs.kernel_trees }}
        working-directory: ${{ env.ROM_DIR }}
        run: |
          IFS=',' read -ra KERNELS <<< "${{ inputs.kernel_trees }}"
          for kernel in "${KERNELS[@]}"; do
            git clone --depth=1 -b "${{ inputs.rom_branch }}" "$kernel" "kernel/${kernel##*/}"
          done

      - name: üè≠ Clone Vendor Trees
        if: ${{ inputs.vendor_trees }}
        working-directory: ${{ env.ROM_DIR }}
        run: |
          IFS=',' read -ra VENDORS <<< "${{ inputs.vendor_trees }}"
          for vendor in "${VENDORS[@]}"; do
            git clone --depth=1 -b "${{ inputs.rom_branch }}" "$vendor" "vendor/${vendor##*/}"
          done

      - name: ü©π Apply Custom Patches
        if: ${{ inputs.custom_patches }}
        working-directory: ${{ env.ROM_DIR }}
        run: |
          curl -L "${{ inputs.custom_patches }}" > patches.sh
          bash patches.sh

      # ================= BUILD =================
      - name: üßπ Clean Workspace
        if: ${{ inputs.clean_build }}
        working-directory: ${{ env.ROM_DIR }}
        run: |
          make clean
          ccache -C
          rm -rf out

      - name: üî® Build ROMs
        working-directory: ${{ env.ROM_DIR }}
        id: build
        run: |
          source build/envsetup.sh
          BUILD_STATUS="success"
          IFS=',' read -ra DEVICES <<< "${{ inputs.devices }}"
          
          for device in "${DEVICES[@]}"; do
            echo "::group::üì± Building $device"
            
            # Custom or default lunch
            if [ -n "${{ inputs.lunch_command }}" ]; then
              eval "${{ inputs.lunch_command }}"
            else
              lunch "${{ inputs.rom_name }}_${device}-userdebug"
            fi
            
            # Execute build
            if ! eval "${{ inputs.build_command }}"; then
              echo "::error::‚ùå Build failed for $device"
              BUILD_STATUS="failed"
              echo "::endgroup::"
              continue
            fi
            
            # Package additional targets
            if [ -n "${{ inputs.extra_packages }}" ]; then
              IFS=',' read -ra EXTRAS <<< "${{ inputs.extra_packages }}"
              for extra in "${EXTRAS[@]}"; do
                mka "$extra"
              done
            fi
            
            echo "::endgroup::"
          done
          
          echo "build_status=${BUILD_STATUS}" >> $GITHUB_OUTPUT
          [ "$BUILD_STATUS" = "success" ] || exit 1

      # ================= ARTIFACTS =================
      - name: üöÄ Create Release
        if: steps.build.outputs.build_status == 'success'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.rom_name }}-${{ env.BUILD_DATE }}
          name: ${{ inputs.rom_name }} Build ${{ env.BUILD_DATE }}
          body: |
            ### Build Details
            - **ROM**: ${{ inputs.rom_name }}
            - **Branch**: ${{ inputs.rom_branch }}
            - **Devices**: ${{ inputs.devices }}
            
            ### Build Command
            ```bash
            ${{ inputs.build_command }}
            ```
          files: ${{ env.ROM_DIR }}/out/target/product/*/*.zip
          draft: false
          prerelease: false

      - name: üì¶ Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rom-artifacts
          path: |
            ${{ env.ROM_DIR }}/out/target/product/*/*.zip
            ${{ env.ROM_DIR }}/build_*.log
          retention-days: 7

      # ================= CLEANUP =================
      - name: üßπ Final Cleanup
        run: |
          find "$ROM_DIR/out" -mindepth 1 -delete
          echo "Final CCache Stats:"
          ccache -s
