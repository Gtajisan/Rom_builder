name: Testing ROM Builder 

on:
  workflow_dispatch:
    inputs:
      rom_name:
        description: 'ROM Name (e.g., LineageOS, crDroid)'
        required: true
        default: 'lineage'
      rom_manifest:
        description: 'Manifest URL (e.g., https://github.com/LineageOS/android.git)'
        required: true
        default: 'https://github.com/LineageOS/android.git'
      rom_branch:
        description: 'Manifest branch'
        required: true
        default: 'lineage-20.0'
      devices:
        description: 'Device codenames (comma separated)'
        required: true
        default: 'davinci'
      clean_build:
        description: 'Perform clean build?'
        required: false
        default: false
        type: boolean
      ccache_size:
        description: 'CCache size'
        required: false
        default: '50G'
      repo_sync_jobs:
        description: 'Repo sync threads'
        required: false
        default: '8'
      build_jobs:
        description: 'make -j value (0 for auto)'
        required: false
        default: '0'
      upload_sourceforge:
        description: 'Upload to SourceForge?'
        required: false
        default: false
        type: boolean
      telegram_notify:
        description: 'Send Telegram notifications?'
        required: false
        default: true
        type: boolean

env:
  ROM_DIR: /mnt/ssd/rom
  CCACHE_DIR: /mnt/ssd/ccache
  USE_CCACHE: 1
  CCACHE_COMPRESS: 1
  TZ: UTC
  BUILD_DATE: $(date +%Y%m%d)

jobs:
  validate:
    name: üîç Validate Environment
    runs-on: [self-hosted, linux, x86_64, rom-builder]
    steps:
      - name: Check hardware
        run: |
          echo "‚öôÔ∏è Hardware Validation:"
          echo "----------------------"
          
          # Minimum requirements
          MIN_DISK=300
          MIN_RAM=32
          REC_DISK=500
          REC_RAM=64
          
          # Current specs
          CPU_CORES=$(nproc)
          TOTAL_RAM=$(free -g | awk '/Mem:/ {print $2}')
          AVAIL_DISK=$(df -BG --output=avail . | tail -1 | tr -d 'G')
          
          echo "‚Ä¢ CPU Cores: ${CPU_CORES}"
          echo "‚Ä¢ RAM: ${TOTAL_RAM}GB"
          echo "‚Ä¢ Disk Space: ${AVAIL_DISK}GB free"
          
          # Validation checks
          if [ "$AVAIL_DISK" -lt "$MIN_DISK" ]; then
            echo "::error::‚ùå Insufficient disk space! Minimum ${MIN_DISK}GB required, found ${AVAIL_DISK}GB"
            exit 1
          fi
          
          if [ "$TOTAL_RAM" -lt "$MIN_RAM" ]; then
            echo "::error::‚ùå Insufficient RAM! Minimum ${MIN_RAM}GB required, found ${TOTAL_RAM}GB"
            exit 1
          fi
          
          if [ "$AVAIL_DISK" -lt "$REC_DISK" ]; then
            echo "‚ö†Ô∏è Warning: For optimal performance, recommend ${REC_DISK}GB disk space"
          fi
          
          if [ "$TOTAL_RAM" -lt "$REC_RAM" ]; then
            echo "‚ö†Ô∏è Warning: For optimal performance, recommend ${REC_RAM}GB RAM"
          fi
          
          echo "‚úÖ Environment validated successfully"

  build:
    name: üèó Build ${{ inputs.rom_name }}
    needs: validate
    runs-on: [self-hosted, linux, x86_64, rom-builder]
    timeout-minutes: 6000
    
    steps:
      # ========== SETUP ==========
      - name: üì¶ Install dependencies
        run: |
          echo "Installing build dependencies..."
          sudo apt update -y
          sudo DEBIAN_FRONTEND=noninteractive apt install -y \
            bc bison build-essential ccache curl flex g++-multilib gcc-multilib \
            git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev \
            lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev \
            libxml2 libxml2-utils lzop maven pngcrush rsync schedtool \
            squashfs-tools xsltproc zip zlib1g-dev repo jq android-sdk-libsparse-utils \
            xmlstarlet pigz p7zip-full aria2 patchelf
          
          # Python compatibility
          sudo ln -sf /usr/bin/python3 /usr/bin/python
          
          # Git configuration
          git config --global user.name "ROM Builder"
          git config --global user.email "builder@localhost"
          git config --global color.ui auto
          git lfs install
          echo "Dependencies installed successfully"

      - name: üóÇ Initialize workspace
        run: |
          mkdir -p "$ROM_DIR" "$CCACHE_DIR"
          chmod -R 777 "$ROM_DIR" "$CCACHE_DIR"
          
          # CCache configuration
          ccache -M "${{ inputs.ccache_size }}"
          ccache -o compression=true
          ccache -z
          echo "Workspace initialized | CCache: ${{ inputs.ccache_size }}"

      # ========== SYNC ==========
      - name: ‚ö° Initialize repo
        working-directory: ${{ env.ROM_DIR }}
        run: |
          echo "Initializing repo manifest..."
          repo init -u "${{ inputs.rom_manifest }}" \
            -b "${{ inputs.rom_branch }}" \
            --depth=1 \
            --repo-rev=main \
            --platform=auto
          echo "Repo initialized successfully"

      - name: üîÑ Sync sources
        working-directory: ${{ env.ROM_DIR }}
        timeout-minutes: 120
        run: |
          echo "Syncing sources with ${{ inputs.repo_sync_jobs }} threads..."
          repo sync -c -j${{ inputs.repo_sync_jobs }} \
            --force-sync \
            --no-clone-bundle \
            --no-tags \
            --optimized-fetch \
            --fail-fast
          echo "Source sync completed"

      # ========== BUILD ==========
      - name: üßπ Clean build (if requested)
        if: ${{ inputs.clean_build == 'true' }}
        working-directory: ${{ env.ROM_DIR }}
        run: |
          echo "Performing clean build..."
          make clean
          ccache -C
          rm -rf out
          echo "Clean build completed"

      - name: üî® Build ROMs
        working-directory: ${{ env.ROM_DIR }}
        id: build
        run: |
          source build/envsetup.sh
          BUILD_STATUS="success"
          DEVICE_LIST=(${INPUT_DEVICES//,/ })
          BUILD_JOBS=$([ "${{ inputs.build_jobs }}" = "0" ] && echo "$(($(nproc) * 2))" || echo "${{ inputs.build_jobs }}")
          
          echo "üìä Build Parameters:"
          echo "‚Ä¢ ROM: ${{ inputs.rom_name }}"
          echo "‚Ä¢ Branch: ${{ inputs.rom_branch }}"
          echo "‚Ä¢ Devices: ${DEVICE_LIST[*]}"
          echo "‚Ä¢ Build Jobs: ${BUILD_JOBS}"
          echo "‚Ä¢ CCache: ${{ inputs.ccache_size }}"
          
          for device in "${DEVICE_LIST[@]}"; do
            echo "::group::üì± Building $device"
            START_TIME=$(date +%s)
            
            # Lunch and build
            if ! lunch "${{ inputs.rom_name }}_${device}-userdebug"; then
              echo "::error::‚ùå Lunch failed for $device"
              BUILD_STATUS="failed"
              echo "::endgroup::"
              continue
            fi
            
            if ! mka bacon -j${BUILD_JOBS} 2>&1 | tee "build_${device}.log"; then
              echo "::error::‚ùå Build failed for $device"
              BUILD_STATUS="failed"
              echo "::endgroup::"
              continue
            fi
            
            # Process build results
            END_TIME=$(date +%s)
            DURATION=$((END
