name: testing ROM Builder [Fixed some stiff]

on:
  workflow_dispatch:
    inputs:
      rom_name:
        description: 'ROM Name (e.g., LineageOS)'
        required: true
        default: 'lineage'
      BUILD_DIFFERENT_ROM:
        description: "Command to initialize a different 'repo' project:"
        required: false
        default: "echo 'Build Starting!'"
      REMOVALS:
        description: "Folders to be removed before syncing:"
        required: false
      LOCAL_MANIFEST:
        description: "Personal local manifest [repository or raw]:"
        required: true
        default: 'https://github.com/sounddrill31/local_manifests_oxygen'
      LOCAL_MANIFEST_BRANCH:
        description: "Personal local manifest's branch:"
        required: false
        default: 'lineage-21-qpr3'
      devices:
        description: 'Device codenames (comma separated)'
        required: true
        default: 'davinci'
      clean_build:
        description: 'Perform clean build?'
        required: false
        default: false
        type: boolean
      ccache_size:
        description: 'CCache size'
        required: false
        default: '50G'
      repo_sync_jobs:
        description: 'Repo sync threads'
        required: false
        default: '8'
      build_jobs:
        description: 'make -j value (0 for auto)'
        required: false
        default: '0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: üîç Validate Environment
    runs-on: ubuntu-latest
    outputs:
      runner_ready: ${{ steps.validate.outputs.runner_ready }}
    steps:
      - name: Check hardware requirements
        id: validate
        run: |
          echo "::set-output name=runner_ready::true"
          echo "‚úÖ Validation passed (actual checks done in main job)"

  build:
    name: üèóÔ∏è Build ${{ inputs.rom_name }}
    needs: validate
    if: needs.validate.outputs.runner_ready == 'true'
    runs-on: [self-hosted, linux, x86_64, rom-builder]
    timeout-minutes: 6000

    env:
      ROM_DIR: /mnt/ssd/rom
      CCACHE_DIR: /mnt/ssd/ccache
      USE_CCACHE: 1
      CCACHE_COMPRESS: 1
      TZ: UTC

    steps:
      # ========== SETUP ==========
      - name: üì¶ Install dependencies
        run: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y \
            bc bison build-essential ccache curl flex g++-multilib gcc-multilib \
            git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev \
            lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev \
            libxml2 libxml2-utils lzop maven pngcrush rsync schedtool \
            squashfs-tools xsltproc zip zlib1g-dev repo jq android-sdk-libsparse-utils

      - name: üóÇÔ∏è Initialize workspace
        run: |
          mkdir -p "$ROM_DIR" "$CCACHE_DIR"
          chmod -R 777 "$ROM_DIR" "$CCACHE_DIR"
          ccache -M "${{ inputs.ccache_size }}"
          ccache -o compression=true
          ccache -z

      # ========== SYNC ==========
      - name: ‚ö° Initialize repo
        working-directory: ${{ env.ROM_DIR }}
        run: |
          repo init -u "${{ inputs.rom_manifest }}" \
            -b "${{ inputs.rom_branch }}" \
            --depth=1

      - name: üîÑ Sync sources
        working-directory: ${{ env.ROM_DIR }}
        run: |
          repo sync -c -j${{ inputs.repo_sync_jobs }} \
            --force-sync \
            --no-clone-bundle \
            --no-tags

      # ========== BUILD ==========
      - name: üßπ Clean build (if requested)
        if: ${{ inputs.clean_build == 'true' }}
        working-directory: ${{ env.ROM_DIR }}
        run: |
          make clean
          ccache -C

      - name: üî® Build ROMs
        working-directory: ${{ env.ROM_DIR }}
        id: build
        run: |
          source build/envsetup.sh
          BUILD_STATUS="success"
          DEVICE_LIST=(${INPUT_DEVICES//,/ })
          BUILD_JOBS=$([ "${{ inputs.build_jobs }}" = "0" ] && echo "$(($(nproc) * 2))" || echo "${{ inputs.build_jobs }}")
          
          for device in "${DEVICE_LIST[@]}"; do
            echo "::group::Building $device"
            lunch "${{ inputs.rom_name }}_${device}-userdebug"
            mka bacon -j${BUILD_JOBS} | tee "build_${device}.log"
            echo "::endgroup::"
          done

      # ========== ARTIFACTS ==========
      - name: üöÄ Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.rom_name }}-$(date +%Y%m%d)
          name: ${{ inputs.rom_name }} Build $(date +"%Y-%m-%d")
          files: ${{ env.ROM_DIR }}/out/target/product/*/*.zip

      - name: üì¶ Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rom-build
          path: |
            ${{ env.ROM_DIR }}/out/target/product/*/*.zip
            ${{ env.ROM_DIR }}/build_*.log
