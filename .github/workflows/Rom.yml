name: fuking ROM Builder

on:
  workflow_dispatch:
    inputs:
      rom_name:
        description: 'ROM Name (e.g., LineageOS, crDroid)'
        required: true
        default: 'lineage'
      rom_manifest:
        description: 'Manifest URL for repo init (e.g., https://github.com/LineageOS/android.git)'
        required: true
      rom_branch:
        description: 'Manifest branch (e.g., lineage-20.0)'
        required: true
        default: 'main'
      clean_build:
        description: 'Perform clean build? (Clears out and ccache)'
        required: false
        default: 'false'
        type: boolean
      device_codenames:
        description: 'Device codename(s), comma separated (e.g., davinci,violet)'
        required: true
        default: 'davinci'
      lunch_combos:
        description: 'Lunch combos (comma separated, must match device order)'
        required: true
        default: 'lineage_davinci-userdebug'
      device_tree_urls:
        description: 'Device tree repo URLs (comma separated)'
        required: false
        default: ''
      device_tree_branches:
        description: 'Device-tree branches (comma separated, empty = rom_branch)'
        required: false
        default: ''
      kernel_tree_url:
        description: 'Kernel tree URL (leave blank if included in device tree)'
        required: false
        default: ''
      kernel_tree_branch:
        description: 'Kernel tree branch'
        required: false
        default: ''
      vendor_tree_url:
        description: 'Vendor tree URL'
        required: false
        default: ''
      vendor_tree_branch:
        description: 'Vendor tree branch'
        required: false
        default: ''
      local_manifest_url:
        description: 'URL of local_manifest repo or raw XML'
        required: false
        default: ''
      build_target:
        description: 'Build target (bacon, otapackage, systemimage, etc.)'
        required: false
        default: 'bacon'
      build_jobs:
        description: 'Number of parallel jobs (default: 2x available cores)'
        required: false
        default: '$(( $(nproc) * 2 ))'
      ccache_size:
        description: 'CCache size (default: 25GB)'
        required: false
        default: '25G'
      upload_to_sourceforge:
        description: 'Upload to SourceForge? (requires secrets)'
        required: false
        default: 'false'
        type: boolean
      telegram_notifications:
        description: 'Send Telegram notifications? (requires secrets)'
        required: false
        default: 'false'
        type: boolean

env:
  ROM_DIR: ${{ github.workspace }}/rom
  CCACHE_DIR: ${{ github.workspace }}/ccache
  DEBIAN_FRONTEND: noninteractive
  TZ: UTC
  BUILD_START_TIME: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-22.04
    outputs:
      build_matrix: ${{ steps.set-matrix.outputs.build_matrix }}
    
    steps:
    - name: Generate build matrix
      id: set-matrix
      run: |
        IFS=',' read -ra DEVICES <<< "${{ github.event.inputs.device_codenames }}"
        IFS=',' read -ra LUNCH_COMBOS <<< "${{ github.event.inputs.lunch_combos }}"
        
        if [ ${#DEVICES[@]} -ne ${#LUNCH_COMBOS[@]} ]; then
          echo "::error::Number of devices (${#DEVICES[@]}) doesn't match number of lunch combos (${#LUNCH_COMBOS[@]})"
          exit 1
        fi
        
        matrix_json="["
        for i in "${!DEVICES[@]}"; do
          matrix_json+="{\"device\":\"${DEVICES[$i]}\",\"lunch_combo\":\"${LUNCH_COMBOS[$i]}\"}"
          if [ $i -lt $((${#DEVICES[@]}-1)) ]; then
            matrix_json+=","
          fi
        done
        matrix_json+="]"
        
        echo "build_matrix=$matrix_json" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ github.event.inputs.rom_name }} for ${{ matrix.device }}
    needs: setup
    runs-on: ubuntu-22.04
    timeout-minutes: 2880
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.build_matrix) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        sudo timedatectl set-timezone UTC
        sudo apt-get update -y
        sudo apt-get install -y \
          openjdk-11-jdk \
          bc bison build-essential ccache curl flex g++-multilib gcc-multilib \
          git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev \
          lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libssl-dev \
          libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools \
          xsltproc zip zlib1g-dev python3 python-is-python3 patchelf \
          xmlstarlet aria2 jq
        
        # Fix for Python 3 compatibility
        sudo ln -sf /usr/bin/python3 /usr/bin/python
        
        # Configure git
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global color.ui true
        git lfs install

    - name: Install repo tool
      run: |
        curl -s https://storage.googleapis.com/git-repo-downloads/repo -o repo
        chmod +x repo
        sudo mv repo /usr/local/bin/repo

    - name: Initialize workspace
      run: |
        mkdir -p "$ROM_DIR"
        mkdir -p "$CCACHE_DIR"
        echo "ROM_DIR=$ROM_DIR" >> $GITHUB_ENV
        echo "CCACHE_DIR=$CCACHE_DIR" >> $GITHUB_ENV

    - name: Initialize ROM repo
      run: |
        cd "$ROM_DIR"
        repo init -u "${{ github.event.inputs.rom_manifest }}" \
          -b "${{ github.event.inputs.rom_branch }}" \
          --depth=1 \
          --repo-rev=stable
        
        # Apply local manifest if specified
        if [[ -n "${{ github.event.inputs.local_manifest_url }}" ]]; then
          mkdir -p .repo/local_manifests
          if [[ "${{ github.event.inputs.local_manifest_url }}" =~ \.xml$ ]]; then
            echo "Downloading raw XML manifest"
            curl -L -o .repo/local_manifests/local_manifest.xml "${{ github.event.inputs.local_manifest_url }}"
          else
            echo "Cloning manifest repository"
            git clone \
              -b "${{ github.event.inputs.local_manifest_branch || github.event.inputs.rom_branch }}" \
              "${{ github.event.inputs.local_manifest_url }}" \
              .repo/local_manifests
          fi
        fi

    - name: Clean workspace if requested
      if: ${{ github.event.inputs.clean_build == 'true' }}
      run: |
        cd "$ROM_DIR"
        rm -rf out
        ccache -C
        repo forall -c 'git clean -fdx && git reset --hard'

    - name: Sync sources
      run: |
        cd "$ROM_DIR"
        repo sync -c \
          --no-tags \
          --no-clone-bundle \
          --optimized-fetch \
          --prune \
          --force-sync \
          -j$(nproc || echo 4) \
          --fail-fast
        
        # Apply patches if patch.sh exists
        if [ -f "vendor/${{ github.event.inputs.rom_name }}/patch.sh" ]; then
          bash "vendor/${{ github.event.inputs.rom_name }}/patch.sh"
        fi

    - name: Setup device trees
      run: |
        cd "$ROM_DIR"
        
        # Device tree
        if [[ -n "${{ github.event.inputs.device_tree_urls }}" ]]; then
          IFS=',' read -ra TREE_URLS <<< "${{ github.event.inputs.device_tree_urls }}"
          IFS=',' read -ra TREE_BRANCHES <<< "${{ github.event.inputs.device_tree_branches || github.event.inputs.rom_branch }}"
          
          for i in "${!TREE_URLS[@]}"; do
            url="${TREE_URLS[$i]}"
            branch="${TREE_BRANCHES[$i]}"
            path="device/${url##*/}"
            echo "Cloning device tree: $url -> $path (branch: $branch)"
            git clone --depth=1 -b "$branch" "$url" "$path"
          done
        fi
        
        # Kernel tree
        if [[ -n "${{ github.event.inputs.kernel_tree_url }}" ]]; then
          echo "Cloning kernel tree"
          git clone --depth=1 \
            -b "${{ github.event.inputs.kernel_tree_branch || github.event.inputs.rom_branch }}" \
            "${{ github.event.inputs.kernel_tree_url }}" \
            kernel/${${{ github.event.inputs.kernel_tree_url }}##*/}
        fi
        
        # Vendor tree
        if [[ -n "${{ github.event.inputs.vendor_tree_url }}" ]]; then
          echo "Cloning vendor tree"
          git clone --depth=1 \
            -b "${{ github.event.inputs.vendor_tree_branch || github.event.inputs.rom_branch }}" \
            "${{ github.event.inputs.vendor_tree_url }}" \
            vendor/${${{ github.event.inputs.vendor_tree_url }}##*/}
        fi

    - name: Setup ccache
      run: |
        export USE_CCACHE=1
        export CCACHE_COMPRESS=1
        export CCACHE_COMPRESSLEVEL=1
        export CCACHE_DIR="$CCACHE_DIR"
        ccache -M "${{ github.event.inputs.ccache_size }}"
        ccache -o compression=true
        ccache -z

    - name: Prepare build environment
      run: |
        cd "$ROM_DIR"
        source build/envsetup.sh
        lunch "${{ matrix.lunch_combo }}"
        
        # Apply device-specific patches if they exist
        if [ -f "device/*/${{ matrix.device }}/patches/apply.sh" ]; then
          echo "Applying device patches"
          bash "device/*/${{ matrix.device }}/patches/apply.sh"
        fi

    - name: Build ROM
      run: |
        cd "$ROM_DIR"
        BUILD_LOG="build_${{ matrix.device }}.log"
        
        {
          echo "===== BUILD STARTED ====="
          date
          echo "Building for device: ${{ matrix.device }}"
          echo "Lunch combo: ${{ matrix.lunch_combo }}"
          echo "Build target: ${{ github.event.inputs.build_target }}"
          echo "Parallel jobs: ${{ github.event.inputs.build_jobs }}"
          
          # Start build with timestamps
          time mka ${{ github.event.inputs.build_target }} -j${{ github.event.inputs.build_jobs }}
          
          echo "===== BUILD FINISHED ====="
          date
          echo "CCache stats:"
          ccache -s
        } 2>&1 | tee "$BUILD_LOG"
        
        # Check build result
        if [ ! -f "out/target/product/${{ matrix.device }}/*.zip" ]; then
          echo "::error::Build failed - no ZIP file produced"
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.rom_name }}_${{ matrix.device }}_${{ github.run_number }}
        path: |
          ${{ env.ROM_DIR }}/out/target/product/${{ matrix.device }}/*.zip
          ${{ env.ROM_DIR }}/out/target/product/${{ matrix.device }}/*.img
          ${{ env.ROM_DIR }}/build_${{ matrix.device }}.log

    - name: Upload to SourceForge
      if: ${{ github.event.inputs.upload_to_sourceforge == 'true' }}
      run: |
        cd "$ROM_DIR/out/target/product/${{ matrix.device }}"
        ZIP_FILE=$(ls *.zip | head -n1)
        
        echo "Uploading $ZIP_FILE to SourceForge"
        sshpass -p "${{ secrets.SOURCEFORGE_PASSWORD }}" \
          scp -o StrictHostKeyChecking=no \
          "$ZIP_FILE" \
          "${{ secrets.SOURCEFORGE_USERNAME }}@frs.sourceforge.net:/home/frs/project/${{ secrets.SOURCEFORGE_PROJECT }}/"

    - name: Send Telegram notification
      if: ${{ github.event.inputs.telegram_notifications == 'true' }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          *${{ github.event.inputs.rom_name }} build completed*
          ✅ *Device*: ${{ matrix.device }}
          ⏱ *Duration*: ${{ job.status }} minutes
          🔗 *Artifacts*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          📅 *Date*: $(date)

    - name: Archive build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build_logs_${{ matrix.device }}
        path: |
          ${{ env.ROM_DIR }}/build_${{ matrix.device }}.log
          ${{ env.ROM_DIR }}/out/error.log
          ${{ env.ROM_DIR }}/out/verbose.log.gz

    - name: Cleanup workspace
      if: always()
      run: |
        echo "Cleaning up workspace..."
        rm -rf "$ROM_DIR/out"
        ccache -s
