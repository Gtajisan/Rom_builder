name: Fuking ROM Builder

on:
  workflow_dispatch:
    inputs:
      # ─── Build Basics ─────────────────────────────────────────────
      rom_name:
        description: 'ROM Name (e.g., LineageOS)'
        required: true
        default: 'lineage'
      rom_manifest:
        description: 'ROM Manifest URL'
        required: true
        default: 'https://github.com/LineageOS/android.git'
      rom_branch:
        description: 'Manifest Branch'
        required: true
        default: 'lineage-20.0'

      # ─── Device ──────────────────────────────────────────────────
      device_codenames:
        description: 'Device codename(s), comma separated (e.g., daisy,snow)'
        required: true
        default: 'daisy'
      lunch_combo:
        description: 'Lunch combo (e.g., lineage_daisy-userdebug)'
        required: true
        default: 'lineage_daisy-userdebug'

      # ─── Device-tree clone (classic style) ───────────────────────
      device_tree_urls:
        description: 'Device tree repo URLs (comma separated, blank to skip)'
        required: false
        default: ''
      device_tree_branches:
        description: 'Device-tree branches (comma separated, empty = default)'
        required: false
        default: ''
      device_tree_paths:
        description: 'Relative destinations (comma separated; empty=default device/<codename>)'
        required: false
        default: ''

      # ─── OPTIONAL Local manifest (modern “roomservice”) ──────────
      local_manifest_url:
        description: 'URL of local_manifest repo or raw XML (leave blank to skip)'
        required: false
      local_manifest_branch:
        description: 'Branch for local_manifest repo'
        required: false
        default: ''

      # ─── Build concurrency option ──────────────────────────────────
      build_jobs:
        description: 'Number of parallel jobs for build'
        required: false
        default: '$(nproc)'

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 2880

    env:
      ROM_DIR: ${{ github.workspace }}/rom

    steps:
      #───────────────────────────────────────────────────────────────
      - name: Checkout workflow repo (for helper scripts or configs)
        uses: actions/checkout@v4

      #───────────────────────────────────────────────────────────────
      - name: Install build prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            openjdk-11-jdk git wget curl bc bison flex build-essential \
            zip unzip python3 python-is-python3 python3-pip \
            ccache libncurses5-dev libncurses5 libncursesw5-dev \
            libssl-dev libxml2-utils liblz4-tool lzop zlib1g-dev \
            pkg-config rsync schedtool xsltproc pngcrush \
            jq nano tmux tree
          # Raise open file limits for repo sync
          echo -e '* soft nofile 65535\n* hard nofile 65535' | sudo tee -a /etc/security/limits.conf

      #───────────────────────────────────────────────────────────────
      - name: Configure Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      #───────────────────────────────────────────────────────────────
      - name: Setup repo tool
        run: |
          if ! command -v repo &>/dev/null; then
            sudo curl -o /usr/local/bin/repo https://storage.googleapis.com/git-repo-downloads/repo
            sudo chmod +x /usr/local/bin/repo
          fi

      #───────────────────────────────────────────────────────────────
      - name: Init & sync ROM manifest
        run: |
          mkdir -p $ROM_DIR
          cd $ROM_DIR
          repo init -u "${{ github.event.inputs.rom_manifest }}" \
                    -b "${{ github.event.inputs.rom_branch }}" --depth=1
          repo sync -c -j$(nproc) --no-tags --no-clone-bundle --optimized-fetch --prune

      #───────────────────────────────────────────────────────────────
      - name: Inject local manifest (if provided)
        if: ${{ github.event.inputs.local_manifest_url != '' }}
        run: |
          cd $ROM_DIR
          mkdir -p .repo/local_manifests
          rm -rf .repo/local_manifests/*
          if [[ "${{ github.event.inputs.local_manifest_url }}" =~ \.xml$ ]]; then
            curl -L -o .repo/local_manifests/local.xml "${{ github.event.inputs.local_manifest_url }}"
          else
            git clone --depth 1 -b "${{ github.event.inputs.local_manifest_branch }}" \
              "${{ github.event.inputs.local_manifest_url }}" .repo/local_manifests
          fi
          echo "::notice ::Local manifest injected"
          repo sync -c -j$(nproc) --no-tags --no-clone-bundle --optimized-fetch --prune

      #───────────────────────────────────────────────────────────────
      - name: Clone standalone device trees (optional)
        if: ${{ github.event.inputs.device_tree_urls != '' }}
        run: |
          cd $ROM_DIR
          IFS=',' read -ra URLS <<< "${{ github.event.inputs.device_tree_urls }}"
          IFS=',' read -ra BRANCHES <<< "${{ github.event.inputs.device_tree_branches }}"
          IFS=',' read -ra PATHS <<< "${{ github.event.inputs.device_tree_paths }}"
          for i in "${!URLS[@]}"; do
            url="${URLS[$i]}"
            branch="${BRANCHES[$i]:-main}"
            path="${PATHS[$i]}"
            # fallback path if empty
            if [[ -z "$path" ]]; then
              # try to extract codename from url or fallback to device/<codename>
              codename="${{ github.event.inputs.device_codenames }}"
              if [[ "$codename" == *","* ]]; then
                codename=$(echo $codename | cut -d',' -f1)
              fi
              path="device/$codename"
            fi
            echo "Cloning device tree $url (branch $branch) into $path"
            rm -rf "$path"
            git clone --depth 1 -b "$branch" "$url" "$path"
          done

      #───────────────────────────────────────────────────────────────
      - name: Setup CCache
        run: |
          cd $ROM_DIR
          export USE_CCACHE=1
          ccache -M 25G
          ccache -o compression=true
          ccache -z

      #───────────────────────────────────────────────────────────────
      - name: Setup build environment and lunch
        run: |
          cd $ROM_DIR
          source build/envsetup.sh
          lunch "${{ github.event.inputs.lunch_combo }}"

      #───────────────────────────────────────────────────────────────
      - name: Build ROM
        run: |
          cd $ROM_DIR
          mka bacon -j${{ github.event.inputs.build_jobs }} 2>&1 | tee build.log

      #───────────────────────────────────────────────────────────────
      - name: Show CCache stats
        run: |
          cd $ROM_DIR
          ccache -s

      #───────────────────────────────────────────────────────────────
      - name: Locate ROM zip
        id: zippy
        run: |
          cd $ROM_DIR/out/target/product/${{ github.event.inputs.device_codenames%%,* }}
          ZIP=$(ls *.zip | grep -vE 'ota|incremental' | head -n1 || true)
          if [[ -z "$ZIP" ]]; then
            echo "::error ::No ROM zip found!"
            exit 1
          fi
          echo "ZIP=$ZIP" | tee -a $GITHUB_ENV
          echo "ROM_ZIP=$ZIP" | tee -a $GITHUB_OUTPUT
          echo "Found ROM zip: $ZIP"

      #───────────────────────────────────────────────────────────────
      - name: List size
        run: |
          cd $ROM_DIR/out/target/product/${{ github.event.inputs.device_codenames%%,* }}
          ls -lh "$ZIP"

      #───────────────────────────────────────────────────────────────
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.zippy.outputs.ROM_ZIP }}
          path: ${{ env.ROM_DIR }}/out/target/product/${{ github.event.inputs.device_codenames%%,* }}/${{ steps.zippy.outputs.ROM_ZIP }}

      #───────────────────────────────────────────────────────────────
      - uses: actions/upload-artifact@v4
        with:
          name: build.log
          path: ${{ env.ROM_DIR }}/build.log

      #───────────────────────────────────────────────────────────────
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: rom-${{ github.event.inputs.device_codenames%%,* }}-${{ github.run_number }}
          name: ${{ github.event.inputs.rom_name }}-${{ github.event.inputs.device_codenames%%,* }}-${{ github.run_number }}
          files: ${{ env.ROM_DIR }}/out/target/product/${{ github.event.inputs.device_codenames%%,* }}/${{ steps.zippy.outputs.ROM_ZIP }}
