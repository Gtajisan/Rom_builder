name: fuking ROM Builder

on:
  workflow_dispatch:
    inputs:
      rom_name:
        description: 'ROM Name (e.g., LineageOS)'
        required: true
        default: 'lineage'
      rom_manifest:
        description: 'ROM Manifest URL'
        required: true
        default: 'https://github.com/LineageOS/android.git'
      rom_branch:
        description: 'Manifest Branch'
        required: true
        default: 'lineage-20.0'
      device_codenames:
        description: 'Device codename(s), comma separated (e.g., daisy,snow)'
        required: true
        default: 'daisy'
      lunch_combo:
        description: 'Lunch combo (e.g., lineage_daisy-userdebug)'
        required: true
        default: 'lineage_daisy-userdebug'
      device_tree_urls:
        description: 'Device tree repo URLs (comma separated, blank to skip)'
        required: false
        default: ''
      device_tree_branches:
        description: 'Device-tree branches (comma separated, empty = default)'
        required: false
        default: ''
      device_tree_paths:
        description: 'Relative destinations (comma separated; empty=default device/<codename>)'
        required: false
        default: ''
      local_manifest_url:
        description: 'URL of local_manifest repo or raw XML (leave blank to skip)'
        required: false
      local_manifest_branch:
        description: 'Branch for local_manifest repo'
        required: false
        default: ''
      build_jobs:
        description: 'Number of parallel jobs for build'
        required: false
        default: '$(nproc)'
      build_different_rom:
        description: "Command to initialize a different 'repo' project:"
        required: false
        default: "echo 'Build Starting!'"

jobs:
  build:
    name: Build ROM
    runs-on: ubuntu-latest
    timeout-minutes: 2880

    env:
      ROM_DIR: ${{ github.workspace }}/rom
      DEBIAN_FRONTEND: noninteractive

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup build server dependencies
      run: |
        sudo apt update -y && sudo apt install -y \
          openjdk-11-jdk bc bison build-essential ccache curl flex g++-multilib \
          gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev \
          lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libssl-dev libxml2 \
          libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev

    - name: Set Git Identity
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Setup repo tool
      run: |
        curl https://storage.googleapis.com/git-repo-downloads/repo > repo
        chmod a+x repo
        sudo mv repo /usr/local/bin/repo

    - name: Run build_different_rom command
      run: |
        cd ${{ github.workspace }}
        eval "${{ github.event.inputs.build_different_rom }}"

    - name: Initialize ROM repo
      run: |
        mkdir -p $ROM_DIR && cd $ROM_DIR
        repo init -u "${{ github.event.inputs.rom_manifest }}" -b "${{ github.event.inputs.rom_branch }}" --depth=1

    - name: Apply local manifest
      if: ${{ github.event.inputs.local_manifest_url != '' }}
      run: |
        cd $ROM_DIR && mkdir -p .repo/local_manifests
        if [[ "${{ github.event.inputs.local_manifest_url }}" =~ \.xml$ ]]; then
          curl -L -o .repo/local_manifests/local.xml "${{ github.event.inputs.local_manifest_url }}"
        else
          git clone -b "${{ github.event.inputs.local_manifest_branch }}" "${{ github.event.inputs.local_manifest_url }}" .repo/local_manifests
        fi

    - name: Sync sources
      run: |
        cd $ROM_DIR
        repo sync -c --no-tags --no-clone-bundle --optimized-fetch --prune -j$(nproc || echo 4)

    - name: Clone device trees
      if: ${{ github.event.inputs.device_tree_urls != '' }}
      run: |
        cd $ROM_DIR
        IFS=',' read -ra URLS <<< "${{ github.event.inputs.device_tree_urls }}"
        IFS=',' read -ra BRANCHES <<< "${{ github.event.inputs.device_tree_branches }}"
        IFS=',' read -ra PATHS <<< "${{ github.event.inputs.device_tree_paths }}"
        for i in "${!URLS[@]}"; do
          url="${URLS[$i]}"
          branch="${BRANCHES[$i]:-main}"
          path="${PATHS[$i]:-device/${{ github.event.inputs.device_codenames%%,* }}}"
          echo "\033[1;34mCloning $url into $path (branch: $branch)\033[0m"
          git clone --depth 1 -b "$branch" "$url" "$path"
        done

    - name: Setup build environment
      run: |
        cd $ROM_DIR
        export USE_CCACHE=1
        ccache -M 25G && ccache -o compression=true && ccache -z
        source build/envsetup.sh
        echo "\033[1;32mLunching combo: ${{ github.event.inputs.lunch_combo }}\033[0m"
        lunch "${{ github.event.inputs.lunch_combo }}"

    - name: Build ROM
      run: |
        cd $ROM_DIR
        echo "\033[1;33mStarting build with mka bacon\033[0m"
        mka bacon -j$(nproc || echo 4) | tee build.log

    - name: Save ccache stats
      run: ccache -s

    - name: Get ROM zip
      id: getzip
      run: |
        cd $ROM_DIR/out/target/product/${{ github.event.inputs.device_codenames%%,* }}
        ZIP_FILE=$(ls *.zip 2>/dev/null | grep -vE 'ota|incremental' | head -n1)
        if [[ -z "$ZIP_FILE" ]]; then
          echo "::error ::No ROM zip found!"
          exit 1
        fi
        echo "zip_file=$ZIP_FILE" >> $GITHUB_OUTPUT

    - name: Upload ROM
      uses: actions/upload-artifact@v4
      with:
        name: ROM-${{ github.run_number }}
        path: ${{ env.ROM_DIR }}/out/target/product/${{ github.event.inputs.device_codenames%%,* }}/${{ steps.getzip.outputs.zip_file }}

    - name: Upload build log
      uses: actions/upload-artifact@v4
      with:
        name: build.log
        path: ${{ env.ROM_DIR }}/build.log

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: rom-${{ github.event.inputs.device_codenames%%,* }}-${{ github.run_number }}
        name: ${{ github.event.inputs.rom_name }}-${{ github.event.inputs.device_codenames%%,* }}-${{ github.run_number }}
        files: ${{ env.ROM_DIR }}/out/target/product/${{ github.event.inputs.device_codenames%%,* }}/${{ steps.getzip.outputs.zip_file }}

    - name: Clean up
      run: |
        echo "\033[1;36mBuild completed. Cleaning workspace.\033[0m"
        sudo rm -rf $ROM_DIR
